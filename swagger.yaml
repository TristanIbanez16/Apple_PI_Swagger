h---
openapi: 3.0.0
info:
  title: Invoice Storage
  description: "This is a simple invoice storage api.  \n"
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/TRISTANJIBANEZ/Invoice_Storage/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: Input Handling
- name: Storage Handling
- name: Invoice Retrieving
- name: Authentication
- name: Health
paths:
  /v1/health:
    get:
      tags:
      - Health
      summary: Check health of server
      description: Check the health of the server
      operationId: healthCheck
      responses:
        "200":
          description: OK
  /v1/invoice/{token}/{invoice_key}:
    get:
      tags:
      - Invoice Retrieving
      summary: View an invoice
      description: "Given an invoice_key and token, retrieve and view the invoice and its relevant information. The invoice is rendered using the Invoice Rendering API."
      operationId: InvoiceView
      parameters:
      - name: token
        in: path
        description: Token of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "23748"
      - name: invoice_key
        in: path
        description: Invoice key of invoice
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 235123
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: array
                xml:
                  name: Invoice
                  wrapped: false
                items:
                  $ref: '#/components/schemas/Invoice'
        "400":
          description: |
            ERROR:
            - Invalid invoice_key.
            - Invalid token.
            - The invoice_key does not belong to the user.
            - The token does not belong to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid invoice_key structure
            - Invalid token structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - Storage Handling
      summary: Edit an invoice
      description: "Given a set of properties, edit the invoice."
      operationId: InvoiceEdit
      parameters:
      - name: token
        in: path
        description: Token of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "235123"
      - name: invoice_key
        in: path
        description: Invoice key of invoice
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 23748
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceEdit'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        "400":
          description: |
            ERROR:
            - Invalid invoice_key.
            - Invalid token.
            - The invoice_key does not belong to the user.
            - The token does not belong to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid invoice_key structure
            - Invalid token structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Storage Handling
      summary: Delete an invoice
      description: "Given a particular invoice, delete invoice from server."
      operationId: InvoiceDelete
      parameters:
      - name: token
        in: path
        description: Token of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "235123"
      - name: invoice_key
        in: path
        description: Invoice key of invoice
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 23748
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        "400":
          description: |
            ERROR:
            - Invalid invoice_key.
            - Invalid token.
            - The invoice_key does not belong to the user.
            - The token does not belong to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid invoice_key structure
            - Invalid token structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/invoice/{token}:
    get:
      tags:
      - Invoice Retrieving
      summary: List invoices
      description: Provide a list of all invoices owned by logged in user.
      operationId: InvoiceList
      parameters:
      - name: token
        in: path
        description: Token of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "23748"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceXMLMulti'
        "400":
          description: |
            ERROR:
            - Invalid invoice_key.
            - Invalid token.
            - The invoice_key does not belong to the user.
            - The token does not belong to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid invoice_key structure
            - Invalid token structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/invoice/{token}/{invoice_key}/{filter_item}:
    get:
      tags:
      - Invoice Retrieving
      summary: Filter invoices
      description: "The ability to filter for invoices by metadata, such as contactID, address, InvoiceID, etc."
      operationId: InvoiceFilter
      parameters:
      - name: invoice_key
        in: path
        description: Invoice key
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "23748"
      - name: token
        in: path
        description: Token of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "235123"
      - name: filter_item
        in: path
        description: Item to filter by
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: PbTGTBMi6j9zVG6OnAJuxNN3ghZvzh5kSysD9pUg
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceXML'
        "400":
          description: |
            ERROR:
            - Invalid invoice_key.
            - Invalid token.
            - The invoice_key does not belong to the user.
            - The token does not belong to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid invoice_key structure
            - Invalid token structure.
            - Invalid filter_item structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/invoice/{token}/{invoice_key}/download:
    get:
      tags:
      - Invoice Retrieving
      summary: Download invoice
      description: Download an invoice using an invoice_key.
      operationId: InvoiceDownload
      parameters:
      - name: token
        in: path
        description: Token of user
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "23748"
      - name: invoice_key
        in: path
        description: Invoice key
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "23748"
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: string
                format: binary
        "400":
          description: |
            ERROR:
            - Invalid invoice_key.
            - Invalid token.
            - The invoice_key does not belong to the user.
            - The token does not belong to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid invoice_key structure
            - Invalid token structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/invoice/upload:
    post:
      tags:
      - Input Handling
      summary: uploads an invoice
      description: The ability to upload and accept input conforming to the UBL format for invoices.
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/invoice_upload_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceKey'
        "400":
          description: |
            ERROR:
              - Invalid file format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/invoice/upload/multi:
    post:
      tags:
      - Input Handling
      summary: uploads more than one invoice
      description: The ability to upload and accept input conforming to the UBL format for invoices.
      operationId: uploadFileMulti
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_multi_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceKeyMulti'
        "400":
          description: |
            ERROR:
              - Invalid file format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/invoice/validate:
    post:
      tags:
      - Input Handling
      summary: validate an invoice
      description: Provide mechanism to validate the invoice. The input file will be passed through invoice validator API.
      operationId: uploadFileValidate
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/invoice_validate_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        "400":
          description: |
            ERROR:
              - Invalid file format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/auth/register:
    post:
      tags:
      - Authentication
      summary: Register user
      description: Takes user information and registers a new user to the system. These users manage invoices.
      operationId: createUser
      parameters:
      - name: nameFirst
        in: query
        description: The First name for the user
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: John
      - name: nameLast
        in: query
        description: The email for user
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: Smith
      - name: email
        in: query
        description: The email for user
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: john.smith@ad.unsw.edu.au
      - name: password
        in: query
        description: The password for user
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: IloveSENG2021
      requestBody:
        description: Register user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          description: |
            ERROR:
            - Email address is used by another user
            - Email address structure invalid.
            - FirstName contains characters other than lower/uppercase letter, spaces, and hyphens.
            - FirstName is less than 3 characters and more than 20 characters.
            - LastName contains characters other than lower/uppercase letter, spaces, and hyphens.
            - LastName is less than 3 characters and more than 20 characters.
            - Password is less than 8 characters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: |
            ERROR:
            - Invalid token structure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/user/login:
    post:
      tags:
      - Authentication
      summary: Logs user into the system
      description: Takes in user information and determines if they can log in.
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The email for login
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: john.smith@ad.unsw.edu.au
      - name: password
        in: query
        description: The password for login
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: IloveSENG2021
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          description: "ERROR: \n- Email doesn’t exist.\n- Password does not match given email address.\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/user/logout:
    post:
      tags:
      - Authentication
      summary: Logs out current logged in user session
      description: Logs the relevant user out from the system.
      operationId: logoutUser
      requestBody:
        description: Logout user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        "400":
          description: "ERROR: \n- User is already logged out.\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: "ERROR: \n- Token is of invalid structure.\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
    Invoice:
      type: object
      properties:
        Invoice:
          $ref: '#/components/schemas/InvoiceInfo'
      xml:
        name: Invoice
    LineItems:
      type: array
      items:
        $ref: '#/components/schemas/LineItems_inner'
    ContactInfo:
      type: object
      properties:
        ContactID:
          type: string
          example: PbTGTBMi6j9zVG6OnAJuxNN3ghZvzh5kSysD9pUg
        Name:
          type: string
          example: UNSW
        Addresses:
          $ref: '#/components/schemas/AddressInfo'
      xml:
        name: ContactInfo
    AddressInfo:
      type: array
      items:
        $ref: '#/components/schemas/AddressInfo_inner'
    AddressType:
      type: object
      properties:
        AddressType:
          type: string
          example: STREET
      xml:
        name: AddressInfo
    InvoiceInfo:
      type: array
      items:
        $ref: '#/components/schemas/InvoiceInfo_inner'
    Item:
      type: object
      properties:
        ItemID:
          type: string
          example: 30404482066f
        Name:
          type: string
          example: Test
        Code:
          type: string
          example: "10"
      xml:
        name: User
    InvoiceEdit:
      type: object
      properties:
        String:
          type: string
          example: Student Debt
      xml:
        name: User
    Token:
      type: object
      properties:
        token:
          type: string
          example: "235123"
      xml:
        name: Token
    InvoiceKey:
      type: object
      properties:
        Invoice Key:
          type: string
          example: "312435123"
      xml:
        name: InvoiceKey
    InvoiceKeyMulti:
      type: object
      properties:
        Invoice Keys:
          type: string
          example: "312435123, 3436678283"
      xml:
        name: InvoiceKey
    InvoiceXML:
      type: object
      properties:
        Invoice:
          type: string
          example: Invoice.XML
      xml:
        name: InvoiceKey
    InvoiceXMLMulti:
      type: object
      properties:
        Invoices:
          type: string
          example: "[\"Invoice01.XML\",\"Invoice02.xml\"]"
      xml:
        name: InvoiceKey
    Pet:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Token'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Empty:
      type: object
    Error:
      type: object
      properties:
        error:
          type: string
          example: error
    invoice_upload_body:
      type: object
      properties:
        File:
          type: string
          format: binary
    upload_multi_body:
      type: object
      properties:
        filename:
          type: array
          items:
            type: string
            format: binary
    invoice_validate_body:
      type: object
      properties:
        fileName:
          type: string
          format: binary
    LineItems_inner:
      type: object
      properties:
        ItemCode:
          type: string
          example: "12"
        Description:
          type: string
          example: Mentoring
        Quantity:
          type: integer
        UnitAmount:
          type: integer
        TaxAmount:
          type: integer
        AccountId:
          type: string
          example: PbTGTBMi6j9zVG6
        Item:
          $ref: '#/components/schemas/Item'
      xml:
        name: LineItems
    AddressInfo_inner:
      type: object
      properties:
        Type:
          type: string
          example: STREET
        AddressLine1:
          type: string
          example: Square House
        AddressLine2:
          type: string
          example: UNSW
        City:
          type: string
          example: Sydney
        PostalCode:
          type: string
          example: "2031"
      xml:
        name: AddressInfo
    InvoiceInfo_inner:
      type: object
      properties:
        Contact:
          $ref: '#/components/schemas/ContactInfo'
        Date:
          type: string
          example: 15/06/24
        Due Date:
          type: string
          example: 18/06/24
        Line Items:
          $ref: '#/components/schemas/LineItems'
        SubTotal:
          type: integer
        TotalTax:
          type: integer
        Total:
          type: integer
        InvoiceID:
          type: string
          example: 243536hc2157876c5
        InvoiceNumber:
          type: string
          example: INV-001
        AmountDue:
          type: integer
        AmountPaid:
          type: integer
        AmountCredited:
          type: integer
      xml:
        name: InvoiceInfo
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
